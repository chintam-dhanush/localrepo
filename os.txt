CAALP---------------------------
factorial---------------------------------
ASSUME CS:CODE,DS:DATA
DATA SEGMENT
M1 DB 13,10,"Enter the number n$"
M2 DB 13,10,"The factorial is:$"
DATA ENDS
CODE SEGMENT
START:
MOV AX,DATA
MOV DS,AX
LEA DX,M1
MOV AH,09H
INT 21H
MOV AH,01H
INT 21H
SUB AL,'0'
MOV CL,AL
MOV CH,00H
MOV AX,1H
NEXT:
MUL CX
DEC CX
CMP CX,1H
JNZ NEXT
MOV CX,0H
PRINT:
MOV DX,0
MOV BX,10
DIV BX
PUSH DX
INC CX
CMP AX,0
JNE PRINT  ; Pushing the individual digits into stack
LEA DX,M2
MOV AH,09H
INT 21H
DISPLAY:
POP DX
ADD DX,'0'; Convert to ASCII Code
MOV AH,2H
INT 21H
LOOP DISPLAY
MOV AH,4CH
INT 21H
CODE ENDS
END START

fibonacci-----------------------------------------------------------------
ASSUME CS:CODE,DS:DATA
DATA SEGMENT
NL1 DB 10,'ENTER NUMBER:$'
NL2 DB 10,'$'
TEMP DB ?
DATA ENDS
CODE SEGMENT
START:
MOV AX,DATA
MOV DS,AX
LEA DX,NL1
MOV AH,09H
INT 21H
MOV AH,01H
INT 21H
SUB AL,30H
MOV CL,AL
MOV AL,0
MOV BL,1
LBL1:
MOV TEMP,AL
LEA DX,NL2
MOV AH,09H
INT 21H
ADD AX,3030H
MOV DX,AX
MOV AH,02H
INT 21H
MOV AL,TEMP
ADD AL,BL
MOV BL,TEMP
LOOP LBL1
MOV AH,4CH
INT 21H
CODE ENDS
END START

sum of n numbers---------------------------------------------------------
ASSUME CS:CODE, DS:DATA
DATA SEGMENT
    VAL1 DB ?
    NL1  DB 0AH,0DH,'ENTER HOW MANY NO U WANT:','$'
    NL2  DB 0AH,0DH,'ENTER NO:','$'
DATA ENDS
CODE SEGMENT
MAIN PROC
         MOV  AX,DATA
         MOV  DS,AX

         LEA  DX,NL1
         MOV  AH,09H
         INT  21H

         MOV  AH,01H
         INT  21H
         SUB  AL,30H

         MOV  CL,AL
         MOV  BL,AL
         MOV  AL,00
         MOV  VAL1,AL

    LBL1:
         LEA  DX,NL2
         MOV  AH,09H
         INT  21H

         MOV  AH,01H
         INT  21H
         SUB  AL,30H

         ADD  AL,VAL1
         MOV  VAL1,AL
         LOOP LBL1

         MOV  AX,00
         MOV  BL,VAL1
         MOV  AH,4CH
         INT  03H


MAIN ENDP
CODE ENDS
       		END MAIN

max and min---------------------------------------------------------
ASSUME DS:DATA ,CS:CODE
DATA SEGMENT
ARR DB 5,3,7,1,9,2,6,8,4
LEN DW $-ARR
MIN DB ?
MAX DB ?
DATA ENDS
CODE SEGMENT
START:
MOV AX,DATA
MOV DS,AX

LEA SI,ARR
MOV AL,ARR[SI]
MOV MIN,AL
MOV MAX,AL

MOV CX,LEN
REPEAT:
MOV AL,ARR[SI]
CMP MIN,AL
JL CHECKMAX

MOV MIN,AL
CHECKMAX:
CMP MAX,AL
JG DONE

MOV MAX,AL
DONE:
INC SI
LOOP REPEAT

MOV BL,MIN
MOV CL,MAX
MOV AH,4CH
INT 03H
CODE ENDS
END START

string reverse-------------------------------------------------------------------
org 100h
assume cs:code,ds:data
data segment
 str db 'HELLO WORLD!','$'
 str_length dw $ - str - 1
 reversed db 32 dup('$')
data ends
code segment
start:
 mov ax,data
 mov ds,ax
 mov cx,str_length
 mov si,offset str
 mov di,offset reversed
 add di,cx
 dec di
reverse_loop:
 mov al,[si]
 mov [di],al
 inc si
 dec di
 loop reverse_loop
 mov dx,offset reversed
 mov ah,09h
 int 21h
 mov ah,4ch
 int 21h
code ends
end start

linear search-------------------------------------------------------------------------
 ASSUME CS:CODE,DS:DATA
DATA SEGMENT
LIST DB 2H,3H,5H,8H
E DB ?
COUNT DB 4H
M DB 10,"ENTER ELEMENT $"
MSG DB 10," ELEMENT FOUND $"
MSG1 DB  10,"ELEMENT NOT FOUND $"
DATA ENDS
CODE SEGMENT
START:
MOV AX,DATA
MOV DS,AX
LEA DX,M
MOV AH,09H
INT 21H
MOV AH,01H
INT 21H
SUB AL,30H
MOV E,AL
MOV SI, OFFSET LIST
MOV CL,COUNT
MOV AL,E
FIRST:
CMP AL,[SI]
JE NEXT
INC SI
LOOP FIRST
LEA DX,MSG1
MOV AH,09H
INT 21H
MOV AH,4CH
INT 21H
NEXT:
LEA DX,MSG
MOV AH,09H
INT 21H
MOV AH,4CH
INT 21H
CODE ENDS
END START

ASSUME CS:CODE, DS:DATA
org 100H
DATA SEGMENT
	V DB 9,6,7,8    
DATA ENDS
CODE SEGMENT
	START:  
			mov ax,data
			mov ds,ax
			MOV CH,4        
			MOV AL,0        
		ITER:           
			MOV BX,0        
		NEXT:           
			MOV AL,V[BX]    
			CMP AL,V[BX+1]  
			JNL SWAP        
			JL CON          
		SWAP:           
			MOV DL,V[BX]    
			MOV AL,V[BX+1]  
			MOV V[BX+1],DL  
			MOV V[BX],AL    
		CON:            
			INC BX          
			CMP BX,3        
			JNZ NEXT        
			DEC CH          
			CMP CH,0        
			JNZ ITER        
			MOV CL,04H
			MOV BL,0H
		DISP:
			MOV DL,V[BX]
			ADD DL,30H
			INC BX
			MOV AH,02H
			INT 21H
			LOOP DISP
			
			MOV AH,4CH
			INT 21H
CODE ENDS
END START


os-----------------------------------------------------
--------------------------------------------------------
-----------------------------------------------------------
-----------------------------------------------------------------
single level directory----------------------------------------------
#include <stdio.h>
#include <string.h>

int main() {
    int nf = 0, i, j = 0, ch;
    char mdname[10], fname[10][10], name[10];

    printf("Enter the directory name: ");
    scanf("%s", mdname);

    printf("Enter the number of files: ");
    scanf("%d", &nf);

    for (i = 0; i < nf; i++) {
        printf("Enter file name to be created: ");
        scanf("%s", fname[i]);
    }

    do {
        printf("Enter file name to be created: ");
        scanf("%s", name);

        for (i = 0; i < j; i++) {
            if (strcmp(name, fname[i]) == 0) {
                printf("There is already a file named %s\n", name);
                break;
            }
        }

        if (i == j) {
            strcpy(fname[j++], name);
        }

        printf("Do you want to enter another file (yes - 1 or no - 0): ");
        scanf("%d", &ch);
    } while (ch == 1);

    printf("Directory name is: %s\n", mdname);
    printf("File names are:");
    for (i = 0; i < j; i++) {
        printf("\n%s", fname[i]);
    }

    return 0;
}

two level directory--------------------------------------------------------------
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

struct {
    char dname[10], fname[10][10];
    int fcnt;
} dir[10];

int main() {
    int i, ch, dcnt = 0, k;
    char f[30], d[30];

    while (1) {
        printf("\n\n1. Create Directory\t2. Create File\t3. Delete File");
        printf("\n4. Search File\t5. Display\t6. Exit");
        printf("\nEnter your choice: ");
        scanf("%d", &ch);

        switch (ch) {
            case 1:
                printf("\nEnter name of directory: ");
                scanf("%s", dir[dcnt].dname);
                dir[dcnt].fcnt = 0;
                dcnt++;
                printf("Directory created\n");
                break;

            case 2:
                printf("\nEnter name of the directory: ");
                scanf("%s", d);
                for (i = 0; i < dcnt; i++) {
                    if (strcmp(d, dir[i].dname) == 0) {
                        printf("Enter name of the file: ");
                        scanf("%s", dir[i].fname[dir[i].fcnt]);
                        dir[i].fcnt++;
                        printf("File created\n");
                        break;
                    }
                }
                if (i == dcnt)
                    printf("Directory %s not found\n", d);
                break;

            case 3:
                printf("\nEnter name of the directory: ");
                scanf("%s", d);
                for (i = 0; i < dcnt; i++) {
                    if (strcmp(d, dir[i].dname) == 0) {
                        printf("Enter name of the file: ");
                        scanf("%s", f);
                        for (k = 0; k < dir[i].fcnt; k++) {
                            if (strcmp(f, dir[i].fname[k]) == 0) {
                                printf("File %s deleted\n", f);
                                dir[i].fcnt--;
                                strcpy(dir[i].fname[k], dir[i].fname[dir[i].fcnt]);
                                goto end_case3;
                            }
                        }
                        printf("File %s not found\n", f);
                        goto end_case3;
                    }
                }
                printf("Directory %s not found\n", d);
                end_case3: break;

            case 4:
                printf("\nEnter name of the directory: ");
                scanf("%s", d);
                for (i = 0; i < dcnt; i++) {
                    if (strcmp(d, dir[i].dname) == 0) {
                        printf("Enter the name of the file: ");
                        scanf("%s", f);
                        for (k = 0; k < dir[i].fcnt; k++) {
                            if (strcmp(f, dir[i].fname[k]) == 0) {
                                printf("File %s found\n", f);
                                goto end_case4;
                            }
                        }
                        printf("File %s not found\n", f);
                        goto end_case4;
                    }
                }
                printf("Directory %s not found\n", d);
                end_case4: break;

            case 5:
                if (dcnt == 0)
                    printf("\nNo Directories\n");
                else {
                    printf("\nDirectory\tFiles");
                    for (i = 0; i < dcnt; i++) {
                        printf("\n%s\t\t", dir[i].dname);
                        for (k = 0; k < dir[i].fcnt; k++)
                            printf("\t%s", dir[i].fname[k]);
                    }
                    printf("\n");
                }
                break;

            case 6:
                exit(0);

            default:
                printf("Invalid choice! Try again.\n");
        }
    }

    return 0;
}

herarchial directory structure--------------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct tree_element {
    char name[20];
    int x, y, ftype, lx, rx, nc, level;
    struct tree_element *link[5];
};

typedef struct tree_element node;

void create(node **root, int lev, char *dname, int lx, int rx, int x);
void display(node *root);

int main() {
    node *root = NULL;
    create(&root, 0, "root", 0, 639, 320);
    display(root);
    return 0;
}

void create(node **root, int lev, char *dname, int lx, int rx, int x) {
    int i, gap;

    if (*root == NULL) {
        *root = (node *)malloc(sizeof(node));
        if (*root == NULL) {
            printf("Memory allocation failed\n");
            return;
        }

        printf("Enter name of dir/file (under %s): ", dname);
        scanf("%s", (*root)->name);

        printf("Enter 1 for Directory, 2 for File: ");
        scanf("%d", &(*root)->ftype);

        (*root)->level = lev;
        (*root)->y = 50 + lev * 50;
        (*root)->x = x;
        (*root)->lx = lx;
        (*root)->rx = rx;

        for (i = 0; i < 5; i++) {
            (*root)->link[i] = NULL;
        }

        if ((*root)->ftype == 1) {
            printf("Number of subdirectories/files for %s: ", (*root)->name);
            scanf("%d", &(*root)->nc);

            if ((*root)->nc == 0)
                gap = rx - lx;
            else
                gap = (rx - lx) / (*root)->nc;

            for (i = 0; i < (*root)->nc; i++) {
                create(&((*root)->link[i]), lev + 1, (*root)->name, lx + gap * i, lx + gap * i + gap, lx + gap * i + gap / 2);
            }
        } else {
            (*root)->nc = 0;
        }
    }
}

void display(node *root) {
    int i;
	if (root == NULL) return;

    printf("Node: %s (Type: %s, Level: %d, Position: %d,%d)\n", root->name, root->ftype == 1 ? "Directory" : "File", root->level, root->x, root->y);

    for (i = 0; i < root->nc; i++) {
        display(root->link[i]);
    }
}

sequential file alloc-----------------------------------------------------------------------
#include <stdio.h>
#include <conio.h>

void main()
{
    int f[50], i, st, len, j, c, k, count = 0;

    for (i = 0; i < 50; i++) {
        f[i] = 0;
    }

    printf("Files Allocated are : \n");

x:
    count = 0;
    printf("Enter starting block and length of files: ");
    scanf("%d%d", &st, &len);

    for (k = st; k < (st + len); k++) {
        if (f[k] == 0) {
            count++;
        }
    }

    if (len == count) {
        for (j = st; j < (st + len); j++) {
            if (f[j] == 0) {
                f[j] = 1;
                printf("%d\t%d\n", j, f[j]);
            }
        }

        if (j != (st + len - 1)) {
            printf("The file is allocated to disk\n");
        }
    } else {
        printf("The file is not allocated \n");
    }

    printf("Do you want to enter more file (Yes - 1 / No - 0): ");
    scanf("%d", &c);

    if (c == 1) {
        goto x;
    }

    getch();
}

indexed file alloc--------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>

int main()
{
    int f[50], index[50], i, n, j, c, k, ind, count = 0;

    for (i = 0; i < 50; i++) {
        f[i] = 0;
    }

x:
    printf("Enter the index block: ");
    scanf("%d", &ind);

    if (f[ind] != 1) {
        printf("Enter number of blocks needed and number of files for the index %d on the disk: \n", ind);
        scanf("%d", &n);
    } else {
        printf("%d index is already allocated \n", ind);
        goto x;
    }

y:
    count = 0;
    printf("Enter the blocks for the indexed file:\n");
    for (i = 0; i < n; i++) {
        scanf("%d", &index[i]);
        if (f[index[i]] == 0) {
            count++;
        }
    }

    if (count == n) {
        for (j = 0; j < n; j++) {
            f[index[j]] = 1;
        }

        printf("Allocated\n");
        printf("File Indexed\n");

        for (k = 0; k < n; k++) {
            printf("%d ------- > %d : %d\n", ind, index[k], f[index[k]]);
        }

    } else {
        printf("File in the index is already allocated \n");
        printf("Enter another file indexed\n");
        goto y;
    }

    printf("Do you want to enter more files (Yes - 1 / No - 0): ");
    scanf("%d", &c);

    if (c == 1) {
        goto x;
    } else {
        exit(0);
    }

    return 0;
}

linked file alloc----------------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>

int main()
{
    int f[50], p, i, st, len, j, c, k, a;

    for (i = 0; i < 50; i++) {
        f[i] = 0;
    }

    printf("Enter how many blocks are already allocated: ");
    scanf("%d", &p);

    printf("Enter the blocks already allocated:\n");
    for (i = 0; i < p; i++) {
        scanf("%d", &a);
        f[a] = 1;
    }

x:
    printf("Enter starting index block and length: ");
    scanf("%d%d", &st, &len);
    k = len;

    if (f[st] == 0) {
        for (j = st; j < (st + k); j++) {
            if (f[j] == 0) {
                f[j] = 1;
                printf("%d ------- > %d\n", j, f[j]);
            } else {
                printf("%d Block is already allocated\n", j);
                k++;  // Extend the range to compensate for already allocated block
            }
        }
    } else {
        printf("%d starting block is already allocated\n", st);
    }

    printf("Do you want to enter more files? (Yes - 1 / No - 0): ");
    scanf("%d", &c);

    if (c == 1) {
        goto x;
    } else {
        exit(0);
    }

    return 0;
}

bankers algorithm---------------------------------------------------------------
#include <stdio.h>

int main() {
    // P0, P1, P2, P3, P4 are the Process names here
    int n = 5; // Number of processes
    int m = 3; // Number of resources
    int i, j, k;

    int alloc[5][3] = {
        { 0, 1, 0 }, // P0
        { 2, 0, 0 }, // P1
        { 3, 0, 2 }, // P2
        { 2, 1, 1 }, // P3
        { 0, 0, 2 }  // P4
    };

    int max[5][3] = {
        { 7, 5, 3 }, // P0
        { 3, 2, 2 }, // P1
        { 9, 0, 2 }, // P2
        { 2, 2, 2 }, // P3
        { 4, 3, 3 }  // P4
    };

    int avail[3] = { 3, 3, 2 }; // Available resources

    int f[n], ans[n], ind = 0;

    for (k = 0; k < n; k++) {
        f[k] = 0;
    }

    int need[n][m];
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            need[i][j] = max[i][j] - alloc[i][j];
        }
    }

    int y = 0;
    for (k = 0; k < n; k++) {
        for (i = 0; i < n; i++) {
            if (f[i] == 0) {
                int flag = 0;

                for (j = 0; j < m; j++) {
                    if (need[i][j] > avail[j]) {
                        flag = 1;
                        break;
                    }
                }

                if (flag == 0) {
                    ans[ind++] = i;

                    for (y = 0; y < m; y++) {
                        avail[y] += alloc[i][y];
                    }

                    f[i] = 1;
                }
            }
        }
    }

    printf("Following is the SAFE Sequence:\n");
    for (i = 0; i < n - 1; i++) {
        printf(" P%d ->", ans[i]);
    }
    printf(" P%d\n", ans[n - 1]);

    return 0;
}
